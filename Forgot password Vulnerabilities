Manipulating Email Parameters:
email=victim@email.com&email=attacker@email.com
email=victim@email.com%20email=attacker@email.com
email=victim@email.com|email=attacker@email.com
email="victim@mail.tld%0a%0dcc:attacker@mail.tld"
email="victim@mail.tld%0a%0dbcc:attacker@mail.tld"
email="victim@mail.tld",email="attacker@mail.tld"
{"email":["victim@mail.tld","atracker@mail.tld"]}
("form": {"email":"victim@email.tld","password":"12345678"})  -- api
============================================================================================================
Password Reset Via Cookie Parameter
COOKIE: hacker@example.com ==server processes the request, it will use the email address from the cookie instead of the victim’s email address and send the password reset link to the attacker’s email address.
=======================================================================================================================
Password Reset Token Leak Via Referrer header -after clicking on token link , vist social media or any other site check the refer header that have link with token in refer headers
===================================================================================================================
Password Reset Vulnerability (Poisoning)
Change the host name in forgot password link in email trigerring request, and check the inbox that the newly injected host name is reflected in url:
Background code issue:
Patch: Use $_SERVER['SERVER_NAME'] to construct password reset URLs instead of $_SERVER['HTTP_HOST'].
example: $resetPasswordURL = "https://{$_SERVER['HTTP_HOST']}/reset-password.php?token=12345678-1234-1234-1234-12345678901";
----------------------------------------------------------------------------------------
No Rate Limiting: Email Bombing / Email Flooding
Brute force the email trigerring request in forgot password with null payload and check email that recevied N number of emails.
------------------------------------------------------------------------------------------
Response Manipulation in password reset link 
https://medium.com/@innocenthacker/how-i-found-the-most-critical-bug-in-live-bug-bounty-event-7a88b3aa97b3
----------------------------------------------------------
Using Expired Token or reusable of token
Check the expiry time of token
Check that once a token is used, it is invalidated and cannot be reused. Attempt to reset the password multiple times using the same token
-------------------------------------------------------------------------------------------------------------------------
Try Using Your Token(Token not tied with user)
If password reset token request identifies user by email or any other than replace with our reset password token and submit the request
----------------------------------------------------
Session Invalidation in Logout/Password Reset(cookie need to expiry in logout or password is changed)
After reset a new password check all the active session are logged and need to authenticate with new password,
--------------------------------------------------------------------------------------------------------
Decode the token
Check the encryption or uuid of token try to decode if it encrypted with weak encryption.sometime the username or email id will be encrypted using MD5 OR BASE64.
--------------------------------------------------------------------------
Password Reset Via Hidden Field Parameter
email=victim@mail.com&hacker_email=hacker@mail.com&hacker_param=1234
---------------------------------------------------------------------------
User enumuration via diffrent resposne for existing user and non existing users
---------------------------------------------------------------------------------------
Weak Password Policy while reseting the new password
============================================================

